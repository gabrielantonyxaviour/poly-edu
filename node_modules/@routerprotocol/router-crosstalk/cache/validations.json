{
  "version": "3.2",
  "log": [
    {
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "62c2eec31b471c81353acd2940edf26941abab75fd17f2189f5bbcaaa9ffd02c",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5f9eff81a669679ee81081efdf0e4069591ca40ca71300b288cf6748500e3cf6",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC165Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:18",
        "version": {
          "withMetadata": "fc6262ffbd66b0968523e1139ac6ef34db2ef6e8237f0fbbed0b7112d7bc75ee",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "f453140119aa4ab940c1c866e30faba30c70b1bf42ecb26b808dc4e355066110",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:191"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "RouterCrossTalk": {
        "src": "contracts/RouterCrossTalk.sol:13",
        "inherit": [
          "ERC165",
          "iRouterCrossTalk",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "fetchHandler()",
          "fetchLinkSetter()",
          "fetchLink(uint8)",
          "fetchFeeToken()",
          "fetchExecutes(bytes32)",
          "routerSync(uint8,address,bytes)",
          "Link(uint8,address)",
          "Unlink(uint8)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RouterCrossTalk",
            "src": "contracts/RouterCrossTalk.sol:65"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "RouterCrossTalk",
              "label": "handler",
              "type": "t_contract(iGenericHandler)3984",
              "src": "contracts/RouterCrossTalk.sol:15"
            },
            {
              "contract": "RouterCrossTalk",
              "label": "linkSetter",
              "type": "t_address",
              "src": "contracts/RouterCrossTalk.sol:17"
            },
            {
              "contract": "RouterCrossTalk",
              "label": "feeToken",
              "type": "t_address",
              "src": "contracts/RouterCrossTalk.sol:19"
            },
            {
              "contract": "RouterCrossTalk",
              "label": "Chain2Addr",
              "type": "t_mapping(t_uint8,t_address)",
              "src": "contracts/RouterCrossTalk.sol:21"
            },
            {
              "contract": "RouterCrossTalk",
              "label": "executes",
              "type": "t_mapping(t_bytes32,t_struct(ExecutesStruct)3995_storage)",
              "src": "contracts/RouterCrossTalk.sol:23"
            }
          ],
          "types": {
            "t_contract(iGenericHandler)3984": {
              "label": "contract iGenericHandler"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_bytes32,t_struct(ExecutesStruct)3995_storage)": {
              "label": "mapping(bytes32 => struct iRouterCrossTalk.ExecutesStruct)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(ExecutesStruct)3995_storage": {
              "label": "struct iRouterCrossTalk.ExecutesStruct",
              "members": [
                {
                  "label": "chainID",
                  "type": "t_uint8"
                },
                {
                  "label": "nonce",
                  "type": "t_uint64"
                }
              ]
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "RouterCrossTalkUpgradeable": {
        "src": "contracts/RouterCrossTalkUpgradeable.sol:14",
        "inherit": [
          "ERC165Upgradeable",
          "iRouterCrossTalkUpgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "fetchHandler()",
          "fetchLinkSetter()",
          "fetchLink(uint8)",
          "fetchFeeToken()",
          "fetchExecutes(bytes32)",
          "routerSync(uint8,address,bytes)",
          "Link(uint8,address)",
          "Unlink(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "RouterCrossTalkUpgradeable",
              "label": "handler",
              "type": "t_contract(iGenericHandler)3984",
              "src": "contracts/RouterCrossTalkUpgradeable.sol:21"
            },
            {
              "contract": "RouterCrossTalkUpgradeable",
              "label": "linkSetter",
              "type": "t_address",
              "src": "contracts/RouterCrossTalkUpgradeable.sol:23"
            },
            {
              "contract": "RouterCrossTalkUpgradeable",
              "label": "feeToken",
              "type": "t_address",
              "src": "contracts/RouterCrossTalkUpgradeable.sol:25"
            },
            {
              "contract": "RouterCrossTalkUpgradeable",
              "label": "Chain2Addr",
              "type": "t_mapping(t_uint8,t_address)",
              "src": "contracts/RouterCrossTalkUpgradeable.sol:27"
            },
            {
              "contract": "RouterCrossTalkUpgradeable",
              "label": "executes",
              "type": "t_mapping(t_bytes32,t_struct(ExecutesStruct)4110_storage)",
              "src": "contracts/RouterCrossTalkUpgradeable.sol:29"
            },
            {
              "contract": "RouterCrossTalkUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)100_storage",
              "src": "contracts/RouterCrossTalkUpgradeable.sol:246"
            }
          ],
          "types": {
            "t_contract(iGenericHandler)3984": {
              "label": "contract iGenericHandler"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_bytes32,t_struct(ExecutesStruct)4110_storage)": {
              "label": "mapping(bytes32 => struct iRouterCrossTalkUpgradeable.ExecutesStruct)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(ExecutesStruct)4110_storage": {
              "label": "struct iRouterCrossTalkUpgradeable.ExecutesStruct",
              "members": [
                {
                  "label": "chainID",
                  "type": "t_uint8"
                },
                {
                  "label": "nonce",
                  "type": "t_uint64"
                }
              ]
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_array(t_uint256)100_storage": {
              "label": "uint256[100]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "RouterSequencerCrossTalk": {
        "src": "contracts/RouterSequencerCrossTalk.sol:14",
        "inherit": [
          "ERC165",
          "iRouterSequencerCrossTalk",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "fetchLinkSetter()",
          "fetchLink(uint8)",
          "fetchFeeToken()",
          "fetchExecutes(bytes32)",
          "transferAmt(bytes,address)",
          "routerSync(uint8,address,bytes)",
          "Link(uint8,address)",
          "Unlink(uint8)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RouterSequencerCrossTalk",
            "src": "contracts/RouterSequencerCrossTalk.sol:70"
          },
          {
            "kind": "state-variable-immutable",
            "name": "sequencerHandler",
            "src": "contracts/RouterSequencerCrossTalk.sol:20"
          },
          {
            "kind": "state-variable-immutable",
            "name": "erc20Handler",
            "src": "contracts/RouterSequencerCrossTalk.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "reserveHandler",
            "src": "contracts/RouterSequencerCrossTalk.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "RouterSequencerCrossTalk",
              "label": "linkSetter",
              "type": "t_address",
              "src": "contracts/RouterSequencerCrossTalk.sol:23"
            },
            {
              "contract": "RouterSequencerCrossTalk",
              "label": "feeToken",
              "type": "t_address",
              "src": "contracts/RouterSequencerCrossTalk.sol:24"
            },
            {
              "contract": "RouterSequencerCrossTalk",
              "label": "Chain2Addr",
              "type": "t_mapping(t_uint8,t_address)",
              "src": "contracts/RouterSequencerCrossTalk.sol:26"
            },
            {
              "contract": "RouterSequencerCrossTalk",
              "label": "executes",
              "type": "t_mapping(t_bytes32,t_struct(ExecutesStruct)4244_storage)",
              "src": "contracts/RouterSequencerCrossTalk.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_bytes32,t_struct(ExecutesStruct)4244_storage)": {
              "label": "mapping(bytes32 => struct iRouterSequencerCrossTalk.ExecutesStruct)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(ExecutesStruct)4244_storage": {
              "label": "struct iRouterSequencerCrossTalk.ExecutesStruct",
              "members": [
                {
                  "label": "chainID",
                  "type": "t_uint8"
                },
                {
                  "label": "nonce",
                  "type": "t_uint64"
                }
              ]
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "RouterSequencerCrossTalkUpgradeable": {
        "src": "contracts/RouterSequencerCrossTalkUpgradeable.sol:15",
        "inherit": [
          "ERC165Upgradeable",
          "iRouterSequencerCrossTalkUpgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "fetchSequencerHandler()",
          "fetchErcHandler()",
          "fetchReserveHandler()",
          "fetchLinkSetter()",
          "fetchLink(uint8)",
          "fetchFeeToken()",
          "fetchExecutes(bytes32)",
          "transferAmt(bytes,address)",
          "routerSync(uint8,address,bytes)",
          "Link(uint8,address)",
          "Unlink(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "RouterSequencerCrossTalkUpgradeable",
              "label": "sequencerHandler",
              "type": "t_contract(iSequencerHandler)4575",
              "src": "contracts/RouterSequencerCrossTalkUpgradeable.sol:22"
            },
            {
              "contract": "RouterSequencerCrossTalkUpgradeable",
              "label": "erc20Handler",
              "type": "t_contract(IERCHandler)3919",
              "src": "contracts/RouterSequencerCrossTalkUpgradeable.sol:23"
            },
            {
              "contract": "RouterSequencerCrossTalkUpgradeable",
              "label": "reserveHandler",
              "type": "t_address",
              "src": "contracts/RouterSequencerCrossTalkUpgradeable.sol:24"
            },
            {
              "contract": "RouterSequencerCrossTalkUpgradeable",
              "label": "linkSetter",
              "type": "t_address",
              "src": "contracts/RouterSequencerCrossTalkUpgradeable.sol:25"
            },
            {
              "contract": "RouterSequencerCrossTalkUpgradeable",
              "label": "feeToken",
              "type": "t_address",
              "src": "contracts/RouterSequencerCrossTalkUpgradeable.sol:26"
            },
            {
              "contract": "RouterSequencerCrossTalkUpgradeable",
              "label": "Chain2Addr",
              "type": "t_mapping(t_uint8,t_address)",
              "src": "contracts/RouterSequencerCrossTalkUpgradeable.sol:27"
            },
            {
              "contract": "RouterSequencerCrossTalkUpgradeable",
              "label": "executes",
              "type": "t_mapping(t_bytes32,t_struct(ExecutesStruct)4371_storage)",
              "src": "contracts/RouterSequencerCrossTalkUpgradeable.sol:28"
            },
            {
              "contract": "RouterSequencerCrossTalkUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)100_storage",
              "src": "contracts/RouterSequencerCrossTalkUpgradeable.sol:333"
            }
          ],
          "types": {
            "t_contract(iSequencerHandler)4575": {
              "label": "contract iSequencerHandler"
            },
            "t_contract(IERCHandler)3919": {
              "label": "contract IERCHandler"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_bytes32,t_struct(ExecutesStruct)4371_storage)": {
              "label": "mapping(bytes32 => struct iRouterSequencerCrossTalkUpgradeable.ExecutesStruct)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(ExecutesStruct)4371_storage": {
              "label": "struct iRouterSequencerCrossTalkUpgradeable.ExecutesStruct",
              "members": [
                {
                  "label": "chainID",
                  "type": "t_uint8"
                },
                {
                  "label": "nonce",
                  "type": "t_uint64"
                }
              ]
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_array(t_uint256)100_storage": {
              "label": "uint256[100]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERCHandler": {
        "src": "contracts/interfaces/iErc20Handler.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getBridgeFee(uint8,address)",
          "_reserve()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "iGenericHandler": {
        "src": "contracts/interfaces/iGenericHandler.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "MapContract((address,uint8,address,uint8),bytes)",
          "UnMapContract((address,uint8,address,uint8),bytes)",
          "genericDeposit(uint8,bytes,uint256,uint256,address)",
          "fetch_chainID()",
          "replayGenericDeposit(uint8,uint64,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "iRouterCrossTalk": {
        "src": "contracts/interfaces/iRouterCrossTalk.sol:8",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "routerSync(uint8,address,bytes)",
          "Link(uint8,address)",
          "Unlink(uint8)",
          "fetchLinkSetter()",
          "fetchLink(uint8)",
          "fetchHandler()",
          "fetchFeeToken()",
          "fetchExecutes(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "iRouterCrossTalkUpgradeable": {
        "src": "contracts/interfaces/iRouterCrossTalkUpgradeable.sol:8",
        "inherit": [
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "routerSync(uint8,address,bytes)",
          "Link(uint8,address)",
          "Unlink(uint8)",
          "fetchLinkSetter()",
          "fetchLink(uint8)",
          "fetchHandler()",
          "fetchFeeToken()",
          "fetchExecutes(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "iRouterSequencerCrossTalk": {
        "src": "contracts/interfaces/iRouterSequencerCrossTalk.sol:8",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "routerSync(uint8,address,bytes)",
          "Link(uint8,address)",
          "Unlink(uint8)",
          "fetchLinkSetter()",
          "fetchLink(uint8)",
          "fetchFeeToken()",
          "fetchExecutes(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "iRouterSequencerCrossTalkUpgradeable": {
        "src": "contracts/interfaces/iRouterSequencerCrossTalkUpgradeable.sol:8",
        "inherit": [
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "routerSync(uint8,address,bytes)",
          "Link(uint8,address)",
          "Unlink(uint8)",
          "fetchLinkSetter()",
          "fetchLink(uint8)",
          "fetchSequencerHandler()",
          "fetchErcHandler()",
          "fetchReserveHandler()",
          "fetchFeeToken()",
          "fetchExecutes(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "iSequencerHandler": {
        "src": "contracts/interfaces/iSequencerHandler.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "genericDepositWithERC(uint8,bytes,bytes,bytes,uint256,uint256,address,bool)",
          "genericDeposit(uint8,bytes,uint256,uint256,address)",
          "executeProposal(bytes)",
          "MapContract((address,uint8,address))",
          "UnMapContract((address,uint8,address))",
          "fetch_chainID()",
          "replayDeposit(uint8,uint64,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "62c2eec31b471c81353acd2940edf26941abab75fd17f2189f5bbcaaa9ffd02c",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "5f9eff81a669679ee81081efdf0e4069591ca40ca71300b288cf6748500e3cf6",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC165Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:18",
        "version": {
          "withMetadata": "fc6262ffbd66b0968523e1139ac6ef34db2ef6e8237f0fbbed0b7112d7bc75ee",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "f453140119aa4ab940c1c866e30faba30c70b1bf42ecb26b808dc4e355066110",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:191"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "RouterCrossTalk": {
        "src": "contracts/RouterCrossTalk.sol:13",
        "inherit": [
          "ERC165",
          "iRouterCrossTalk",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "fetchHandler()",
          "fetchLinkSetter()",
          "fetchLink(uint8)",
          "fetchFeeToken()",
          "fetchExecutes(bytes32)",
          "routerSync(uint8,address,bytes)",
          "Link(uint8,address)",
          "Unlink(uint8)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RouterCrossTalk",
            "src": "contracts/RouterCrossTalk.sol:65"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "RouterCrossTalk",
              "label": "handler",
              "type": "t_contract(iGenericHandler)2448",
              "src": "contracts/RouterCrossTalk.sol:15"
            },
            {
              "contract": "RouterCrossTalk",
              "label": "linkSetter",
              "type": "t_address",
              "src": "contracts/RouterCrossTalk.sol:17"
            },
            {
              "contract": "RouterCrossTalk",
              "label": "feeToken",
              "type": "t_address",
              "src": "contracts/RouterCrossTalk.sol:19"
            },
            {
              "contract": "RouterCrossTalk",
              "label": "Chain2Addr",
              "type": "t_mapping(t_uint8,t_address)",
              "src": "contracts/RouterCrossTalk.sol:21"
            },
            {
              "contract": "RouterCrossTalk",
              "label": "executes",
              "type": "t_mapping(t_bytes32,t_struct(ExecutesStruct)2459_storage)",
              "src": "contracts/RouterCrossTalk.sol:23"
            }
          ],
          "types": {
            "t_contract(iGenericHandler)2448": {
              "label": "contract iGenericHandler"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_bytes32,t_struct(ExecutesStruct)2459_storage)": {
              "label": "mapping(bytes32 => struct iRouterCrossTalk.ExecutesStruct)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(ExecutesStruct)2459_storage": {
              "label": "struct iRouterCrossTalk.ExecutesStruct",
              "members": [
                {
                  "label": "chainID",
                  "type": "t_uint8"
                },
                {
                  "label": "nonce",
                  "type": "t_uint64"
                }
              ]
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "RouterCrossTalkUpgradeable": {
        "src": "contracts/RouterCrossTalkUpgradeable.sol:14",
        "inherit": [
          "ERC165Upgradeable",
          "iRouterCrossTalkUpgradeable",
          "IERC165Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "fetchHandler()",
          "fetchLinkSetter()",
          "fetchLink(uint8)",
          "fetchFeeToken()",
          "fetchExecutes(bytes32)",
          "routerSync(uint8,address,bytes)",
          "Link(uint8,address)",
          "Unlink(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "RouterCrossTalkUpgradeable",
              "label": "handler",
              "type": "t_contract(iGenericHandler)2448",
              "src": "contracts/RouterCrossTalkUpgradeable.sol:21"
            },
            {
              "contract": "RouterCrossTalkUpgradeable",
              "label": "linkSetter",
              "type": "t_address",
              "src": "contracts/RouterCrossTalkUpgradeable.sol:23"
            },
            {
              "contract": "RouterCrossTalkUpgradeable",
              "label": "feeToken",
              "type": "t_address",
              "src": "contracts/RouterCrossTalkUpgradeable.sol:25"
            },
            {
              "contract": "RouterCrossTalkUpgradeable",
              "label": "Chain2Addr",
              "type": "t_mapping(t_uint8,t_address)",
              "src": "contracts/RouterCrossTalkUpgradeable.sol:27"
            },
            {
              "contract": "RouterCrossTalkUpgradeable",
              "label": "executes",
              "type": "t_mapping(t_bytes32,t_struct(ExecutesStruct)2574_storage)",
              "src": "contracts/RouterCrossTalkUpgradeable.sol:29"
            },
            {
              "contract": "RouterCrossTalkUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)100_storage",
              "src": "contracts/RouterCrossTalkUpgradeable.sol:240"
            }
          ],
          "types": {
            "t_contract(iGenericHandler)2448": {
              "label": "contract iGenericHandler"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_bytes32,t_struct(ExecutesStruct)2574_storage)": {
              "label": "mapping(bytes32 => struct iRouterCrossTalkUpgradeable.ExecutesStruct)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(ExecutesStruct)2574_storage": {
              "label": "struct iRouterCrossTalkUpgradeable.ExecutesStruct",
              "members": [
                {
                  "label": "chainID",
                  "type": "t_uint8"
                },
                {
                  "label": "nonce",
                  "type": "t_uint64"
                }
              ]
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_array(t_uint256)100_storage": {
              "label": "uint256[100]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "iGenericHandler": {
        "src": "contracts/interfaces/iGenericHandler.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "MapContract((address,uint8,address))",
          "UnMapContract((address,uint8,address))",
          "genericDeposit(uint8,bytes,uint256,uint256,address)",
          "fetch_chainID()",
          "replayGenericDeposit(uint8,uint64,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "iRouterCrossTalk": {
        "src": "contracts/interfaces/iRouterCrossTalk.sol:8",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "routerSync(uint8,address,bytes)",
          "Link(uint8,address)",
          "Unlink(uint8)",
          "fetchLinkSetter()",
          "fetchLink(uint8)",
          "fetchHandler()",
          "fetchFeeToken()",
          "fetchExecutes(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "iRouterCrossTalkUpgradeable": {
        "src": "contracts/interfaces/iRouterCrossTalkUpgradeable.sol:8",
        "inherit": [
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "routerSync(uint8,address,bytes)",
          "Link(uint8,address)",
          "Unlink(uint8)",
          "fetchLinkSetter()",
          "fetchLink(uint8)",
          "fetchHandler()",
          "fetchFeeToken()",
          "fetchExecutes(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    }
  ]
}