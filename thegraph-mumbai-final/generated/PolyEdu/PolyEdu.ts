// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class CertificateIssued extends ethereum.Event {
  get params(): CertificateIssued__Params {
    return new CertificateIssued__Params(this);
  }
}

export class CertificateIssued__Params {
  _event: CertificateIssued;

  constructor(event: CertificateIssued) {
    this._event = event;
  }

  get projectId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get student(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get certificate_meta(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class CreateCourse extends ethereum.Event {
  get params(): CreateCourse__Params {
    return new CreateCourse__Params(this);
  }
}

export class CreateCourse__Params {
  _event: CreateCourse;

  constructor(event: CreateCourse) {
    this._event = event;
  }

  get projectId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get ans(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get creator(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get course_meta(): string {
    return this._event.parameters[3].value.toString();
  }

  get certificate_meta(): string {
    return this._event.parameters[4].value.toString();
  }

  get timestamp(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class CrossTalkReceive extends ethereum.Event {
  get params(): CrossTalkReceive__Params {
    return new CrossTalkReceive__Params(this);
  }
}

export class CrossTalkReceive__Params {
  _event: CrossTalkReceive;

  constructor(event: CrossTalkReceive) {
    this._event = event;
  }

  get sourceChain(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get destChain(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get sourceAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class CrossTalkSend extends ethereum.Event {
  get params(): CrossTalkSend__Params {
    return new CrossTalkSend__Params(this);
  }
}

export class CrossTalkSend__Params {
  _event: CrossTalkSend;

  constructor(event: CrossTalkSend) {
    this._event = event;
  }

  get sourceChain(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get destChain(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get sourceAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get destinationAddress(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get _selector(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get _data(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }

  get _hash(): Bytes {
    return this._event.parameters[6].value.toBytes();
  }
}

export class Linkevent extends ethereum.Event {
  get params(): Linkevent__Params {
    return new Linkevent__Params(this);
  }
}

export class Linkevent__Params {
  _event: Linkevent;

  constructor(event: Linkevent) {
    this._event = event;
  }

  get ChainID(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get linkedContract(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferSingle extends ethereum.Event {
  get params(): TransferSingle__Params {
    return new TransferSingle__Params(this);
  }
}

export class TransferSingle__Params {
  _event: TransferSingle;

  constructor(event: TransferSingle) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class URI extends ethereum.Event {
  get params(): URI__Params {
    return new URI__Params(this);
  }
}

export class URI__Params {
  _event: URI;

  constructor(event: URI) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Unlinkevent extends ethereum.Event {
  get params(): Unlinkevent__Params {
    return new Unlinkevent__Params(this);
  }
}

export class Unlinkevent__Params {
  _event: Unlinkevent;

  constructor(event: Unlinkevent) {
    this._event = event;
  }

  get ChainID(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get linkedContract(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PolyEdu__coursesResult {
  value0: BigInt;
  value1: BigInt;
  value2: string;
  value3: string;

  constructor(value0: BigInt, value1: BigInt, value2: string, value3: string) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromString(this.value3));
    return map;
  }

  getProjectId(): BigInt {
    return this.value0;
  }

  getCreatedTimeStamp(): BigInt {
    return this.value1;
  }

  getCourse_meta(): string {
    return this.value2;
  }

  getCertificate_meta(): string {
    return this.value3;
  }
}

export class PolyEdu__fetchExecutesResultValue0Struct extends ethereum.Tuple {
  get chainID(): i32 {
    return this[0].toI32();
  }

  get nonce(): BigInt {
    return this[1].toBigInt();
  }
}

export class PolyEdu__routerSyncResult {
  value0: boolean;
  value1: Bytes;

  constructor(value0: boolean, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }

  getValue0(): boolean {
    return this.value0;
  }

  getValue1(): Bytes {
    return this.value1;
  }
}

export class PolyEdu extends ethereum.SmartContract {
  static bind(address: Address): PolyEdu {
    return new PolyEdu("PolyEdu", address);
  }

  AVALANCHE_CHAIN_ID(): i32 {
    let result = super.call(
      "AVALANCHE_CHAIN_ID",
      "AVALANCHE_CHAIN_ID():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try_AVALANCHE_CHAIN_ID(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "AVALANCHE_CHAIN_ID",
      "AVALANCHE_CHAIN_ID():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  GOERLI_CHAIN_ID(): i32 {
    let result = super.call("GOERLI_CHAIN_ID", "GOERLI_CHAIN_ID():(uint8)", []);

    return result[0].toI32();
  }

  try_GOERLI_CHAIN_ID(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "GOERLI_CHAIN_ID",
      "GOERLI_CHAIN_ID():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  balanceOf(account: Address, id: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address, id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(accounts: Array<Address>, ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    accounts: Array<Address>,
    ids: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  courses(param0: BigInt): PolyEdu__coursesResult {
    let result = super.call(
      "courses",
      "courses(uint256):(uint256,uint256,string,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new PolyEdu__coursesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toString(),
      result[3].toString()
    );
  }

  try_courses(param0: BigInt): ethereum.CallResult<PolyEdu__coursesResult> {
    let result = super.tryCall(
      "courses",
      "courses(uint256):(uint256,uint256,string,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PolyEdu__coursesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toString(),
        value[3].toString()
      )
    );
  }

  fetchCrossChainGasLimit(): BigInt {
    let result = super.call(
      "fetchCrossChainGasLimit",
      "fetchCrossChainGasLimit():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_fetchCrossChainGasLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "fetchCrossChainGasLimit",
      "fetchCrossChainGasLimit():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  fetchExecutes(hash: Bytes): PolyEdu__fetchExecutesResultValue0Struct {
    let result = super.call(
      "fetchExecutes",
      "fetchExecutes(bytes32):((uint8,uint64))",
      [ethereum.Value.fromFixedBytes(hash)]
    );

    return changetype<PolyEdu__fetchExecutesResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_fetchExecutes(
    hash: Bytes
  ): ethereum.CallResult<PolyEdu__fetchExecutesResultValue0Struct> {
    let result = super.tryCall(
      "fetchExecutes",
      "fetchExecutes(bytes32):((uint8,uint64))",
      [ethereum.Value.fromFixedBytes(hash)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<PolyEdu__fetchExecutesResultValue0Struct>(value[0].toTuple())
    );
  }

  fetchFeeToken(): Address {
    let result = super.call("fetchFeeToken", "fetchFeeToken():(address)", []);

    return result[0].toAddress();
  }

  try_fetchFeeToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "fetchFeeToken",
      "fetchFeeToken():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  fetchHandler(): Address {
    let result = super.call("fetchHandler", "fetchHandler():(address)", []);

    return result[0].toAddress();
  }

  try_fetchHandler(): ethereum.CallResult<Address> {
    let result = super.tryCall("fetchHandler", "fetchHandler():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  fetchLink(_chainID: i32): Address {
    let result = super.call("fetchLink", "fetchLink(uint8):(address)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_chainID))
    ]);

    return result[0].toAddress();
  }

  try_fetchLink(_chainID: i32): ethereum.CallResult<Address> {
    let result = super.tryCall("fetchLink", "fetchLink(uint8):(address)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_chainID))
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  fetchLinkSetter(): Address {
    let result = super.call(
      "fetchLinkSetter",
      "fetchLinkSetter():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_fetchLinkSetter(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "fetchLinkSetter",
      "fetchLinkSetter():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isCompleted(param0: Address, param1: BigInt): boolean {
    let result = super.call(
      "isCompleted",
      "isCompleted(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try_isCompleted(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isCompleted",
      "isCompleted(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  receiveCrossChain(_recipient: Address, _id: BigInt, _data: Bytes): boolean {
    let result = super.call(
      "receiveCrossChain",
      "receiveCrossChain(address,uint256,bytes):(bool)",
      [
        ethereum.Value.fromAddress(_recipient),
        ethereum.Value.fromUnsignedBigInt(_id),
        ethereum.Value.fromBytes(_data)
      ]
    );

    return result[0].toBoolean();
  }

  try_receiveCrossChain(
    _recipient: Address,
    _id: BigInt,
    _data: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "receiveCrossChain",
      "receiveCrossChain(address,uint256,bytes):(bool)",
      [
        ethereum.Value.fromAddress(_recipient),
        ethereum.Value.fromUnsignedBigInt(_id),
        ethereum.Value.fromBytes(_data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  routerSync(
    srcChainID: i32,
    srcAddress: Address,
    data: Bytes
  ): PolyEdu__routerSyncResult {
    let result = super.call(
      "routerSync",
      "routerSync(uint8,address,bytes):(bool,bytes)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(srcChainID)),
        ethereum.Value.fromAddress(srcAddress),
        ethereum.Value.fromBytes(data)
      ]
    );

    return new PolyEdu__routerSyncResult(
      result[0].toBoolean(),
      result[1].toBytes()
    );
  }

  try_routerSync(
    srcChainID: i32,
    srcAddress: Address,
    data: Bytes
  ): ethereum.CallResult<PolyEdu__routerSyncResult> {
    let result = super.tryCall(
      "routerSync",
      "routerSync(uint8,address,bytes):(bool,bytes)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(srcChainID)),
        ethereum.Value.fromAddress(srcAddress),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PolyEdu__routerSyncResult(value[0].toBoolean(), value[1].toBytes())
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  uri(tokenId: BigInt): string {
    let result = super.call("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_uri(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  validateQuiz(projectId: BigInt, attempts: Array<BigInt>): boolean {
    let result = super.call(
      "validateQuiz",
      "validateQuiz(uint256,uint256[10]):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(projectId),
        ethereum.Value.fromUnsignedBigIntArray(attempts)
      ]
    );

    return result[0].toBoolean();
  }

  try_validateQuiz(
    projectId: BigInt,
    attempts: Array<BigInt>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "validateQuiz",
      "validateQuiz(uint256,uint256[10]):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(projectId),
        ethereum.Value.fromUnsignedBigIntArray(attempts)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get valist_registry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get valist_license(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get genericHandler_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class LinkCall extends ethereum.Call {
  get inputs(): LinkCall__Inputs {
    return new LinkCall__Inputs(this);
  }

  get outputs(): LinkCall__Outputs {
    return new LinkCall__Outputs(this);
  }
}

export class LinkCall__Inputs {
  _call: LinkCall;

  constructor(call: LinkCall) {
    this._call = call;
  }

  get _chainID(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _linkedContract(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class LinkCall__Outputs {
  _call: LinkCall;

  constructor(call: LinkCall) {
    this._call = call;
  }
}

export class UnlinkCall extends ethereum.Call {
  get inputs(): UnlinkCall__Inputs {
    return new UnlinkCall__Inputs(this);
  }

  get outputs(): UnlinkCall__Outputs {
    return new UnlinkCall__Outputs(this);
  }
}

export class UnlinkCall__Inputs {
  _call: UnlinkCall;

  constructor(call: UnlinkCall) {
    this._call = call;
  }

  get _chainID(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class UnlinkCall__Outputs {
  _call: UnlinkCall;

  constructor(call: UnlinkCall) {
    this._call = call;
  }
}

export class _approveFeesCall extends ethereum.Call {
  get inputs(): _approveFeesCall__Inputs {
    return new _approveFeesCall__Inputs(this);
  }

  get outputs(): _approveFeesCall__Outputs {
    return new _approveFeesCall__Outputs(this);
  }
}

export class _approveFeesCall__Inputs {
  _call: _approveFeesCall;

  constructor(call: _approveFeesCall) {
    this._call = call;
  }

  get _feeToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class _approveFeesCall__Outputs {
  _call: _approveFeesCall;

  constructor(call: _approveFeesCall) {
    this._call = call;
  }
}

export class CreateCourseCall extends ethereum.Call {
  get inputs(): CreateCourseCall__Inputs {
    return new CreateCourseCall__Inputs(this);
  }

  get outputs(): CreateCourseCall__Outputs {
    return new CreateCourseCall__Outputs(this);
  }
}

export class CreateCourseCall__Inputs {
  _call: CreateCourseCall;

  constructor(call: CreateCourseCall) {
    this._call = call;
  }

  get projectId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get ans(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get course_meta(): string {
    return this._call.inputValues[2].value.toString();
  }

  get certificate_meta(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class CreateCourseCall__Outputs {
  _call: CreateCourseCall;

  constructor(call: CreateCourseCall) {
    this._call = call;
  }
}

export class ReceiveCrossChainCall extends ethereum.Call {
  get inputs(): ReceiveCrossChainCall__Inputs {
    return new ReceiveCrossChainCall__Inputs(this);
  }

  get outputs(): ReceiveCrossChainCall__Outputs {
    return new ReceiveCrossChainCall__Outputs(this);
  }
}

export class ReceiveCrossChainCall__Inputs {
  _call: ReceiveCrossChainCall;

  constructor(call: ReceiveCrossChainCall) {
    this._call = call;
  }

  get _recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class ReceiveCrossChainCall__Outputs {
  _call: ReceiveCrossChainCall;

  constructor(call: ReceiveCrossChainCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RouterSyncCall extends ethereum.Call {
  get inputs(): RouterSyncCall__Inputs {
    return new RouterSyncCall__Inputs(this);
  }

  get outputs(): RouterSyncCall__Outputs {
    return new RouterSyncCall__Outputs(this);
  }
}

export class RouterSyncCall__Inputs {
  _call: RouterSyncCall;

  constructor(call: RouterSyncCall) {
    this._call = call;
  }

  get srcChainID(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get srcAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class RouterSyncCall__Outputs {
  _call: RouterSyncCall;

  constructor(call: RouterSyncCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }

  get value1(): Bytes {
    return this._call.outputValues[1].value.toBytes();
  }
}

export class SafeBatchTransferFromCall extends ethereum.Call {
  get inputs(): SafeBatchTransferFromCall__Inputs {
    return new SafeBatchTransferFromCall__Inputs(this);
  }

  get outputs(): SafeBatchTransferFromCall__Outputs {
    return new SafeBatchTransferFromCall__Outputs(this);
  }
}

export class SafeBatchTransferFromCall__Inputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeBatchTransferFromCall__Outputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }
}

export class SafeMintCall extends ethereum.Call {
  get inputs(): SafeMintCall__Inputs {
    return new SafeMintCall__Inputs(this);
  }

  get outputs(): SafeMintCall__Outputs {
    return new SafeMintCall__Outputs(this);
  }
}

export class SafeMintCall__Inputs {
  _call: SafeMintCall;

  constructor(call: SafeMintCall) {
    this._call = call;
  }

  get projectId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SafeMintCall__Outputs {
  _call: SafeMintCall;

  constructor(call: SafeMintCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetCrossChainGasLimitCall extends ethereum.Call {
  get inputs(): SetCrossChainGasLimitCall__Inputs {
    return new SetCrossChainGasLimitCall__Inputs(this);
  }

  get outputs(): SetCrossChainGasLimitCall__Outputs {
    return new SetCrossChainGasLimitCall__Outputs(this);
  }
}

export class SetCrossChainGasLimitCall__Inputs {
  _call: SetCrossChainGasLimitCall;

  constructor(call: SetCrossChainGasLimitCall) {
    this._call = call;
  }

  get _gasLimit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetCrossChainGasLimitCall__Outputs {
  _call: SetCrossChainGasLimitCall;

  constructor(call: SetCrossChainGasLimitCall) {
    this._call = call;
  }
}

export class SetFeesTokenCall extends ethereum.Call {
  get inputs(): SetFeesTokenCall__Inputs {
    return new SetFeesTokenCall__Inputs(this);
  }

  get outputs(): SetFeesTokenCall__Outputs {
    return new SetFeesTokenCall__Outputs(this);
  }
}

export class SetFeesTokenCall__Inputs {
  _call: SetFeesTokenCall;

  constructor(call: SetFeesTokenCall) {
    this._call = call;
  }

  get _feeToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeesTokenCall__Outputs {
  _call: SetFeesTokenCall;

  constructor(call: SetFeesTokenCall) {
    this._call = call;
  }
}

export class SetLinkerCall extends ethereum.Call {
  get inputs(): SetLinkerCall__Inputs {
    return new SetLinkerCall__Inputs(this);
  }

  get outputs(): SetLinkerCall__Outputs {
    return new SetLinkerCall__Outputs(this);
  }
}

export class SetLinkerCall__Inputs {
  _call: SetLinkerCall;

  constructor(call: SetLinkerCall) {
    this._call = call;
  }

  get _linker(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetLinkerCall__Outputs {
  _call: SetLinkerCall;

  constructor(call: SetLinkerCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class ValidateQuizCall extends ethereum.Call {
  get inputs(): ValidateQuizCall__Inputs {
    return new ValidateQuizCall__Inputs(this);
  }

  get outputs(): ValidateQuizCall__Outputs {
    return new ValidateQuizCall__Outputs(this);
  }
}

export class ValidateQuizCall__Inputs {
  _call: ValidateQuizCall;

  constructor(call: ValidateQuizCall) {
    this._call = call;
  }

  get projectId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get attempts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class ValidateQuizCall__Outputs {
  _call: ValidateQuizCall;

  constructor(call: ValidateQuizCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
